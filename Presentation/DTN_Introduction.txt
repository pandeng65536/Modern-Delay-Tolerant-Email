Hello professors, I’m here to introduce my final-year project, which is called “Simulation and Limitation Analysis of Modern Delay-Tolerant Email.” The key words here are “Email” and “Delay.” First, I’d like to start by introducing the first keyword—Email.

How does the email system work? Let me give you an example.
Suppose Alice wants to send an email to Bob. First, Alice opens the Thunderbird app on her smartphone to write the message. 
After Alice finishes and clicks send, the email goes from her smartphone to a Mail Server. The Mail Server actually runs two programs. Postfix and Dovecot. Postfix works like a post office that receives the email. Then Postfix looks up the address of Bob’s mail server using DNS.
Example.org is also a Mail Server, and it runs its own Postfix program, which is like Bob’s local post office. Once the email reaches there, Postfix hands it over to Dovecot. Dovecot works like a mailbox.
Finally, when Bob opens Thunderbird and connects to Dovecot, he can read the email.

Now let’s move on to the second keyword: delay. When we want to use the Internet in space, we run into a problem—two planets are very far from each other. For example, it takes light about 3 to 22 minutes to travel from Earth to Mars. Because of this, space networks have two main features that are very different from networks on Earth: high delays and frequent disruptions. Obviously, the TCP protocol, which needs multiple handshakes to set up a connection, doesn’t work anymore in this situation.

To solve this problem, a new network architecture was designed. It is called Delay-Tolerant Networking. The idea of DTN is “store and forward.” This means that when the network is disconnected, data packets are stored at each node instead of being thrown away. Once the connection is back, the node will keep forwarding the packets to their destination.

DTN solves the problems of space network, but there’s still one more challenge if we want to send interplanetary emails. Modern email uses the SMTP protocol, which is based on TCP/IP networks and doesn’t work well with DTN. So, Johnson came up with a solution——gateways.
In Johnson’s draft, he suggests that every planet has its own TCP/IP network, and DTN is used to connect the different planets together. The DTN and the TCP/IP network on each planet are joined using gateways.

I use 5 Docker containers in total: 2 represent mail servers on different celestial bodies, 1 is a delay container to simulate the space network, and the last 2 are the client container for users.
I made the DNS process simpler by just using the hosts file.

Besides the main scenario, I also simulated a more extreme situation: What if users could travel between celestial bodies? How would they retrieve their email on a different celestial body? For example, when a user from the Moon moves to Earth, their emails are still sent to the mail server on the Moon. So, the user has to fetch their emails through the space network.
Since this time the email retrieval doesn’t go through a gateway, DTN can’t help—the client has to connect directly to the mail server on the Moon using TCP over the space network. As a result, getting emails takes much longer than before.

I test different one-way network delays (0s/1s/2s/5s), and record the total time required to retrieve all emails (overall retrieval time). 
The overall download time increases linearly with network delay. When the delay is 5 seconds, the email client becomes very sluggish and is almost unusable.
To improve the email retrieval experience in deep space, it is necessary to introduce a DTN retrieval agent or a batch synchronization mechanism during the email retrieval process.

Besides receiving emails, sending emails also faces the same problems.

I've got a simple idea for how to fix this. Let's just set up another mail server on every planet to handle sending and syncing emails. That way, all inter-planetary communication would be sure to use DTN.

From this simulation, I found that...